"""
Django settings for main project.

Generated by 'django-admin startproject' using Django 5.0.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from datetime import timedelta

from pathlib import Path
from dotenv import load_dotenv

import dj_database_url


load_dotenv(".env")
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
# The root of the git repo - Could be ~/project or ~/repo
REPO_DIR = os.path.realpath(os.path.join(BASE_DIR, ".."))
# The directory of the current user ie /home/django a.k.a. ~
HOME_DIR = os.path.realpath(os.path.join(REPO_DIR, ".."))
# The directory where collectstatic command copies/symlinks the files to
# This can/should be located at ~/staticfiles, preferrably outside the git repo
STATIC_DIR = os.path.realpath(os.path.join(HOME_DIR, "staticfiles"))
# The directory where different applications uploads media files to
# This can/should be located at ~/media, preferrably outside the git repo
MEDIA_DIR = os.path.realpath(os.path.join(HOME_DIR, "media"))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY", "")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DEBUG", "False").lower() in ("true", "1", "yes")
# print(f"DEBUG: {DEBUG}")
# DEBUG = True  # Remove this hardcoded line

ENABLE_SILK = os.environ.get("ENABLE_SILK", "False").lower() == "true"

# Proper ALLOWED_HOSTS configuration
ALLOWED_HOSTS = os.environ.get(
    "DJANGO_ALLOWED_HOSTS", 
    "localhost,127.0.0.1,0.0.0.0"
).split(",")

# CSRF_TRUSTED_ORIGINS = os.getenv(
#     "DJANGO_CSRF_TRUSTED_ORIGINS", "https://127.0.0.1"
# ).split(",")

# CSRF trusted origins for Docker setup
CSRF_TRUSTED_ORIGINS = os.environ.get(
    "DJANGO_CSRF_TRUSTED_ORIGINS",
    "http://localhost,http://127.0.0.1,http://0.0.0.0"
).split(",")

MIKROTIK_URL = os.environ.get(
    "MIKROTIK_URL", "http://103.146.16.148"
)  # Use http:// or https://
MIKROTIK_USER = os.environ.get("MIKROTIK_USER", "kamrul")
MIKROTIK_PASS = os.environ.get("MIKROTIK_PASS", "kamrul#2025")

# Application definition

DJANGO_APPS = [
    "unfold",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]
PROJECT_APPS = [
    "core",
    "common",
    "customer",
]

THIRD_PARTY_APPS = [
    "corsheaders",
    "django_cleanup.apps.CleanupConfig",
    "rest_framework",
]

if ENABLE_SILK:
    THIRD_PARTY_APPS += ["silk"]

if DEBUG:
    THIRD_PARTY_APPS += ["drf_yasg"]

INSTALLED_APPS = DJANGO_APPS + PROJECT_APPS + THIRD_PARTY_APPS

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "core.csrf_middleware.CSRFExemptMiddleware",  # Add our custom CSRF exemption middleware
    "core.csrf_middleware.CustomCsrfViewMiddleware",  # Use our custom CSRF middleware
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# Enable Silk middleware if ENABLE SILK is True
if ENABLE_SILK:
    MIDDLEWARE += [
        "silk.middleware.SilkyMiddleware",
    ]

ROOT_URLCONF = "app.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "app.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

# if DEBUG:
#     DATABASE_URL = os.path.join(REPO_DIR, "dev_db.sqlite3")
# else:
#     DATABASE_URL = os.environ.get("DATABASE_URL", "")
# DATABASE_URL = os.environ.get(
#     "DATABASE_URL", "postgres://dev_user:changeme@db:5432/dev_db"
# )
DATABASE_URL = os.environ.get("DATABASE_URL", "")
print("Database url: ", DATABASE_URL)
DATABASES = {
    "default": dj_database_url.config(
        default=DATABASE_URL,
        conn_max_age=600,
        conn_health_checks=True,
    )
}

# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.sqlite3",
#         "NAME": BASE_DIR / "db.sqlite3",
#     }
# }


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

# STATIC_ROOT = STATIC_DIR
STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "staticfiles"

MEDIA_ROOT = MEDIA_DIR
MEDIA_URL = "/media/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

APPEND_SLASH = False

AUTH_USER_MODEL = "core.User"

# Logging settings
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "INFO",  # Adjust the log level as needed
    },
}


REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        # "rest_framework_simplejwt.authentication.JWTAuthentication",
        "rest_framework.authentication.SessionAuthentication",
        # Use Customized jwt Authentication
        "core.token_authentication.JWTAuthentication",
    ),
    "DEFAULT_THROTTLE_CLASSES": [
        "rest_framework.throttling.AnonRateThrottle",
        "rest_framework.throttling.UserRateThrottle",
    ],
    # "DEFAULT_FILTER_BACKENDS": ("django_filters.rest_framework.DjangoFilterBackend",),
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
        # "rest_framework.renderers.BrowsableAPIRenderer",
    ],
    # "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "DEFAULT_THROTTLE_RATES": {"anon": "300/minute", "user": "1200/minute"},
    "DEFAULT_PAGINATION_CLASS": "common.pagination.ListPagination",
    "PAGE_SIZE": 20,
}


# # Cors Allowed Origins
# CORS_ALLOWED_ORIGINS = os.environ.get(
#     "CORS_ALLOWED_ORIGINS", "http://localhost:3000,http://127.0.0.1:3000"
# ).split(",")

# # Cors alowed origin
# CORS_ALLOWED_ORIGINS = [
#     "http://localhost",
#     "http://127.0.0.1",
# ]

# Proper CORS configuration for Docker setup
CORS_ALLOWED_ORIGINS = os.environ.get(
    "CORS_ALLOWED_ORIGINS",
    "http://localhost,http://127.0.0.1,http://localhost:3000,http://127.0.0.1:3000,http://localhost:80,http://127.0.0.1:80"
).split(",")

# Only allow CORS_ALLOW_ALL_ORIGINS in development
if DEBUG:
    CORS_ALLOW_ALL_ORIGINS = True
else:
    CORS_ALLOW_ALL_ORIGINS = False

# Additional CORS settings for better compatibility
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_ALL_HEADERS = True
CORS_ALLOW_METHODS = [
    "DELETE",
    "GET",
    "OPTIONS",
    "PATCH",
    "POST",
    "PUT",
]

# CSRF Configuration for API
CSRF_TRUSTED_ORIGINS = [
    "http://localhost",
    "http://127.0.0.1",
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://localhost:80",
    "http://127.0.0.1:80",
]

# CSRF exemption for API endpoints (since we're using JWT authentication)
CSRF_EXEMPT_URLS = [
    r'^/api/.*$',  # All API endpoints
    r'^/users/login.*$',  # Login endpoints specifically
    r'^/users/login/refresh.*$',  # Token refresh endpoints
    r'^/dashboard.*$',  # Dashboard endpoint
]

# CORS_ALLOWED_ORIGIN_REGEXES = [
#     r"^http://localhost(:[0-9]+)?$",
#     r"^http://127\\.0\\.0\\.1(:[0-9]+)?$",
#     r"^http://192\\.168\\.[0-9]+\\.[0-9]+(:[0-9]+)?$",
#     r"^http://10\\.[0-9]+\\.[0-9]+\\.[0-9]+(:[0-9]+)?$",
# ]
